@inject IInscriptoCarreraService inscriptoCarreraService
@inject IGenericService<Carrera> carreraService

<div>
    <h4>Datos del Alumno</h4>
    <p>Nombre: @alumno.ApellidoNombre</p>
    <p>Dirección: @alumno.Direccion</p>
    <p>Teléfono: @alumno.Telefono</p>
    <p>Email: @alumno.Email</p>
</div>

<h4>Inscripciones a Carreras</h4>
<button class="btn btn-primary" @onclick="()=>HandleInscribirseACarrera()">Inscribirse a una nueva carrera</button>
@if (inscripcionesACarreras == null)
{
    <p><em>No se encontraron inscripciones a carreras</em></p>
}
else
{
    <p>El alumno se encuentra inscripto a las siguientes carreras:</p>
    <br />
    //agrego boton para inscribirse a una carrera nueva mostrando una ListCard de carreras para seleccionar una y generar la inscripcion a la carrera
        

    <table class="table">
        <thead>
            <tr>
                <th>Carrera</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var inscripcion in inscripcionesACarreras)
            {
                <tr>
                    <td>@inscripcion.Carrera.Nombre</td>
                </tr>
            }
        </tbody>
    </table>
}
@if (nuevaInscripcionACarrera)
{
    <ListCard ListEntity="@(carreras.Cast<IEntityIdNombre>().ToList())" TituloCard="Carreras" OnSeleccionar="HandleSeleccionarCarrera" />
}


@code {
    [Parameter]
    public Alumno alumno { get; set; }
    List<InscriptoCarrera>? inscripcionesACarreras { get; set; }
    bool nuevaInscripcionACarrera { get; set; }=false;
    List<Carrera> carreras { get; set; }


    protected override async Task OnInitializedAsync()
    {
        carreras = await carreraService.GetAllAsync();
        inscripcionesACarreras = await inscriptoCarreraService.GetByAlumno(alumno.Id);
    }

    private void HandleInscribirseACarrera()
    {
        nuevaInscripcionACarrera = true;
        StateHasChanged();
    }

    private async Task HandleSeleccionarCarrera(int idCarrera)
    {
        await inscriptoCarreraService.AddAsync(new InscriptoCarrera { AlumnoId = alumno.Id, CarreraId = idCarrera });
        nuevaInscripcionACarrera = false;
        inscripcionesACarreras = await inscriptoCarreraService.GetByAlumno(alumno.Id);
        
        StateHasChanged();
    }
}