@using InstitutoServices.Models.Login
@inject AuthenticationService AuthService
@inject NavigationManager NavigationManager
@inject IUsuarioService usuarioService
@inject IInscriptoCarreraService inscriptoCarreraService
@inject ILogger<NavMenu> logger
@inject IUsuarioStateService usuarioStateService
@inject IMemoryCacheService _memoryCache



<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Instituto Nº20</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Inicio
            </NavLink>
        </div>



        @if (usuarioStateService.Usuario != null)
        {
            @if (usuarioStateService.Usuario.TipoUsuario == TipoUsuarioEnum.Alumno)
            {
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="inscripcionmesasexamenes">
                        <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Inscripción mesas de exámenes
                    </NavLink>
                </div>
            }
        
        

            <div class="nav-item px-3">
                <NavLink class="nav-link" href="alumnos">
                    <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Alumnos
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="docentes">
                    <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Docentes
                </NavLink>
            </div>




            <div class="nav-item px-3">
                <NavLink class="nav-link" href="inscripciones">
                <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Inscripciones
            </NavLink>
        </div>
        }
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="mesasexamenes">
                <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Mesas de exámenes
            </NavLink>
        </div>

            <div class="nav-item px-3">
                <NavLink class="nav-link" href="horarios">
                    <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Horarios
                </NavLink>
            </div>
     

        <div class="nav-item px-3">
            @if (usuarioStateService.Usuario != null)
            {
                <div class="user-info-container d-flex flex-column align-items-center p-3">
                    <a href="perfilusuario">
                        <img src="@usuarioStateService.FirebaseUser?.PhotoUrl" class="rounded-circle user-photo mb-2" />
                    </a>

                    <span class="user-name">@usuarioStateService.FirebaseUser?.DisplayName</span>
                    
                    <button class="logout-button btn btn-outline-light mt-2" @onclick="CerrarSesion">
                        <span class="bi-box-arrow-in-right" aria-hidden="true"></span> @textoMenuLogin
                    </button>
                </div>
            }
            else
            {
                <NavLink class="nav-link" href="login">
                    <span class="bi-box-arrow-in-right" aria-hidden="true"></span> @textoMenuLogin
                </NavLink>
            }
        </div>

    </nav>
</div>

@code {
    private bool collapseNavMenu = true;
    public List<InscriptoCarrera>? inscripcionesACarreras { get; set; }

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private string textoMenuLogin => usuarioStateService?.Usuario != null ? "Cerrar sesión" : "Iniciar sesión";

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected async override Task OnInitializedAsync()
    {
        if (usuarioStateService?.FirebaseUser==null)
        {
            await AuthService.GetUserAuthenticated();
        }
        usuarioStateService.OnChange += ChequeoEstadoLogin;
        GetCacheData();
    }
    private void GetCacheData()
    {
        Task.WhenAll(new List<Task>
            {
                Task.Run(async () => _memoryCache.GetAllCacheAsync<Alumno>("Alumnos")),
                Task.Run(async () => _memoryCache.GetAllCacheAsync<AnioCarrera>("AniosCarreras")),
                Task.Run(async () =>_memoryCache.GetAllCacheAsync<Aula>("Aulas")),
                Task.Run(async () =>_memoryCache.GetAllCacheAsync<Carrera>("Carreras")),
                Task.Run(async () =>_memoryCache.GetAllCacheAsync<CicloLectivo>("CiclosLectivos")),
                Task.Run(async () =>_memoryCache.GetAllCacheAsync<Docente>("Docentes")),
                Task.Run(async () =>_memoryCache.GetAllCacheAsync<Hora>("Horas")),
                Task.Run(async () =>_memoryCache.GetAllCacheAsync<Horario>("Horarios")),
                Task.Run(async () =>_memoryCache.GetAllCacheAsync<DetalleHorario>("DetallesHorarios")),
                Task.Run(async () =>_memoryCache.GetAllCacheAsync<IntegranteHorario>("IntegrantesHorarios")),
                Task.Run(async () =>_memoryCache.GetAllCacheAsync<JefaturaSeccion>("JefaturasSecciones")),
                Task.Run(async () =>_memoryCache.GetAllCacheAsync<Materia>("Materias")),
                Task.Run(async () =>_memoryCache.GetAllCacheAsync<TurnoExamen>("TurnosExamenes")),
                Task.Run(async () =>_memoryCache.GetAllCacheAsync<Inscripcion>("Inscripciones")),
                Task.Run(async () =>_memoryCache.GetAllCacheAsync<DetalleInscripcion>("DetallesInscripciones")),
                Task.Run(async () =>_memoryCache.GetAllCacheAsync<MesaExamen>("MesasExamenes")),
                Task.Run(async () =>_memoryCache.GetAllCacheAsync<DetalleMesaExamen>("DetallesMesasExamenes")),
                Task.Run(async () =>_memoryCache.GetAllCacheAsync<InscripcionExamen>("InscripcionesExamenes")),
                Task.Run(async () =>_memoryCache.GetAllCacheAsync<DetalleInscripcionExamen>("DetallesInscripcionesExamenes")),
                Task.Run(async () =>_memoryCache.GetAllCacheAsync<InscriptoCarrera>("InscriptosCarreras")),

            });


    }
    public void Dispose()
    {
        usuarioStateService.OnChange -= ChequeoEstadoLogin;

    }
    public async void ChequeoEstadoLogin()
    {
        StateHasChanged();
        //si ya hay alguien autenticado lo envio al componente perfilUsuario
        if (usuarioStateService.Usuario != null)
        {
            NavigationManager.NavigateTo("/perfilusuario");
        }else
        {
            NavigationManager.NavigateTo("/login");
        }   
    }
    private async Task CerrarSesion()
    {
        await AuthService.SignOut();
    }
}
