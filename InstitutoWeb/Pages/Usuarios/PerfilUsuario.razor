@page "/perfilusuario"
@using InstitutoServices.Models.Login

@inject NavigationManager NavigationManager
@inject AuthenticationService AuthService
@inject IUsuarioService usuarioService
@inject IUsuarioStateService usuarioStateService


@inject SweetAlertService SweetAlert
@inject ILogger<PerfilUsuario> logger

<PageTitle>Perfil de Usuario</PageTitle>


@if (userFirebaseAuthenticate == null)
{
    <p><em>Cargando información del usuario...</em></p>
}
else
{
    <h3>Hola @userFirebaseAuthenticate.DisplayName</h3>
    @if(usuarioStateService.Usuario==null&&tipoUsuario==0)
    {
        <p><em>Eres un nuevo usuario, necesitamos completar tu perfil selecciona el tipo de usuario que eres</em></p>
        <ListCardEnum EnumType="typeof(TipoUsuarioEnum)" TituloCard="Tipo de Usuario" OnSeleccionar="HandleSeleccionarTipoUsuario" />
    }
    else
    {
        <UsuarioData usuario="@usuarioStateService.Usuario" usuarioFirebase="@userFirebaseAuthenticate" tipoUsuario="@tipoUsuario" />
    }
           

}

@code {
    FirebaseUser? userFirebaseAuthenticate { get; set; } = null;

    TipoUsuarioEnum tipoUsuario { get; set; } 


    protected override void OnInitialized()
    {
        userFirebaseAuthenticate = usuarioStateService.FirebaseUser;
        //usuario = await usuarioService.GetUserByEmail(userFirebaseAuthenticate?.Email);
        if (usuarioStateService.Usuario != null)
        {
            tipoUsuario = usuarioStateService.Usuario.TipoUsuario;
        }
        //logger.LogInformation($"usuario={usuario?.PropertiesToString()}");

        usuarioStateService.OnChange += ChequeoEstadoLogin;



    }
    public void ChequeoEstadoLogin()
    {
        if (usuarioStateService.Usuario == null)
        {
            NavigationManager.NavigateTo("/login");
        }else
        StateHasChanged();
        
    }


    private void HandleSeleccionarTipoUsuario(Enum value)
    {
        if (value is TipoUsuarioEnum tipoUsuario)
        {
            this.tipoUsuario = tipoUsuario;
        }
    }


}
