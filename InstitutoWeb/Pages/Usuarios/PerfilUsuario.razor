@page "/perfilusuario"

@inject NavigationManager NavigationManager
@inject FirebaseAuthService AuthService
@inject IUsuarioService usuarioService
@inject SweetAlertService SweetAlert
@inject ILogger<PerfilUsuario> logger

<PageTitle>Perfil de Usuario</PageTitle>

@if (userFirebaseAuthenticate == null)
{
    <p><em>Cargando información del usuario...</em></p>
}
else
{
    <h3>Hola @userFirebaseAuthenticate.DisplayName</h3>
    @if(usuario!=null)
    {
        <UsuarioData usuario="@usuario" />
    }
    else
    {
        <p><em>Eres un nuevo usuario, necesitamos completar tu perfil para ofrecerte todas las posibilidades de nuestro sitio web</em></p>
        @if(tipoUsuario==0)
        {
            <ListCardEnum EnumType="typeof(TipoUsuarioEnum)" TituloCard="Tipo de Usuario" OnSeleccionar="HandleSeleccionarTipoUsuario" />
        }
        
    }
    @if (tipoUsuario == TipoUsuarioEnum.Alumno)
    {
        @if (alumno == null)
        {
            <FormAlumno ApellidoNombre="@userFirebaseAuthenticate.DisplayName" Email="@userFirebaseAuthenticate.Email" OnGuardarAlumno="GuardarAlumno" />
        }
        else //muestro los datos del alumno
        {
            <AlumnoData alumno="@alumno" />
        }
    }           
        

    

}

@code {
    FirebaseUser? userFirebaseAuthenticate { get; set; } = null;
    Usuario? usuario { get; set; } 
    Alumno? alumno { get; set;}
    Docente? docente { get; set; }
    TipoUsuarioEnum tipoUsuario { get; set; } 
    int idAlumno { get; set; }

    protected override async Task OnInitializedAsync()
    {
        userFirebaseAuthenticate = await AuthService.GetUserAuthenticated();
        usuario = await usuarioService.GetUserByEmail(userFirebaseAuthenticate?.Email);
        logger.LogInformation($"usuario={usuario?.PropertiesToString()}");
        if(usuario!=null)
        {
            tipoUsuario = usuario.TipoUsuario;
            if(tipoUsuario == TipoUsuarioEnum.Alumno)
            {
                alumno = usuario.Alumno;

            }
            if(tipoUsuario == TipoUsuarioEnum.Docente)
            {
                docente = usuario.Docente;
            }
        }
        AuthService.OnChangeLogin += ChequeoEstadoLogin;


    }
    public async void ChequeoEstadoLogin()
    {
        userFirebaseAuthenticate = await AuthService.GetUserAuthenticated();
        StateHasChanged();
        //si no hay usuario autenticado lo redirijo a la página de login
        if (userFirebaseAuthenticate == null)
        {
            NavigationManager.NavigateTo("/login");
        }
    }
    private async Task GuardarAlumno(Alumno alumno)
    {
        idAlumno = alumno.Id;
        this.alumno=alumno;
        usuario = new Usuario()
        {
            Email = userFirebaseAuthenticate.Email,
            User = userFirebaseAuthenticate.DisplayName,
            TipoUsuario = tipoUsuario,
            AlumnoId = alumno.Id
        };
        //logger.LogInformation($"Guardando usuario={usuario.PropertiesToString()}{Environment.NewLine} el alumno a guardar es={alumno.PropertiesToString()}");
        await usuarioService.AddAsync(usuario);
        await SweetAlert.FireAsync(new SweetAlertOptions
        {
            Title = "Usuario creado con éxito",
            Text = $"El usuario {usuario.User} fue creado correctamente",
            Icon = SweetAlertIcon.Info,
            ShowCancelButton = false,
            ConfirmButtonText = "Ok",
        });
        StateHasChanged();
    }

    private async Task HandleSeleccionarTipoUsuario(Enum value)
    {
        if (value is TipoUsuarioEnum tipoUsuario)
        {
            this.tipoUsuario = tipoUsuario;
        }
    }

}
