@page "/editarmateria"
@inject NavigationManager NavigationManager
@inject IMemoryCacheService _memoryCache

@if (materia == null)
{
    <p><em>Cargando...</em></p>
}
else
{
    <h3>Editando materia de @nombreAnioCarrera </h3>
    <EditForm Model="materia" OnValidSubmit="GuardarMateria">
        <DataAnnotationsValidator />
        <div class="col-md-3">
            <label class="form-label mb-2" >Materia:</label>
            <InputText class="form-control mb-2" type="text" @bind-Value="materia.Nombre"/>
        </div>
        <div class="col-md-3">
            <label class="form-label">Recreo:</label>
            <InputCheckbox @bind-Value="materia.EsRecreo" class="form-check" />
        </div>
        <ValidationSummary />
        <button class="btn btn-primary mb-2" type="submit">Guardar</button>
        <button class="btn btn-primary mb-2" type="button" @onclick="@(()=>NavigationManager.NavigateTo($"/materias?idAnioCarrera={idAnioCarrera}&nombreAnioCarrera={nombreAnioCarrera}"))">Volver a la lista</button>
    </EditForm>
}
@code {
    [SupplyParameterFromQuery]
    [Parameter]
    public int idMateria { get; set; }

    [SupplyParameterFromQuery]
    [Parameter]
    public int idAnioCarrera { get; set; }

    [SupplyParameterFromQuery]
    [Parameter]
    public string? nombreAnioCarrera { get; set; }

    public Materia? materia { get; set; } 

    protected override async Task OnInitializedAsync()
    {
        materia = (await _memoryCache.GetAllCacheAsync<Materia>("Materias")).Where(m => m.Id.Equals(idMateria)).FirstOrDefault();
    }

    private async Task GuardarMateria()
    {
        await _memoryCache.UpdateCacheAsync<Materia>(materia,"Materias");
        NavigationManager.NavigateTo($"/materias?idAnioCarrera={idAnioCarrera}&nombreAnioCarrera={nombreAnioCarrera}");
    }
}

