@page "/horas"

@inject SweetAlertService SweetAlert
@inject IMemoryCacheService _memoryCache


<PageTitle>Horas</PageTitle>
<h1>Horas</h1>

@if (horas == null)
{
    <p><em>Cargando...</em></p>
}
else
{
    <NuevoEditarHora Hora="@currentHora" OnCancelar="Cancelar" OnGuardar="Guardar" />
     <TableHoras ListHoras="horas" OnEditar="Editar" OnEliminar="Eliminar" /> 
}

@code {
    private List<Hora>? horas;
    private Hora? currentHora;

    protected override async Task OnInitializedAsync()
    {
        horas= await _memoryCache.GetAllCacheAsync<Hora>("Horas");
    }

    private async void Eliminar(Hora hora)
    {
        SweetAlertResult respuesta = await SweetAlert.FireAsync(new SweetAlertOptions
            {
                Title = "Borrando Hora",
                Text = $"¿Está seguro que desea borrar la hora {hora.Nombre}",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Si, quiero borrarlo!",
                CancelButtonText = "No, espera"
            });
        if (respuesta.IsConfirmed)
        {
            await _memoryCache.DeleteCacheAsync<Hora>(hora.Id, "Horas");
            horas = await _memoryCache.GetAllCacheAsync<Hora>("Horas");
            StateHasChanged();
        }
    }
    private async Task Guardar()
    {
        horas = await _memoryCache.GetAllCacheAsync<Hora>("Horas");
        currentHora = null;
        StateHasChanged();

    }
    private async Task Cancelar()
    {
        currentHora = null;
    }
    private async Task Editar(Hora hora)
    {
        currentHora = hora;
    }
}
