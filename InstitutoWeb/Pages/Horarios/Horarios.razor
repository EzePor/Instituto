@page "/horarios"

@inject SweetAlertService SweetAlert
@inject ILogger<Horarios> logger
@inject IMemoryCacheService _memoryCache
@inject IUsuarioStateService usuarioStateService


<PageTitle>Horarios</PageTitle>
<h1>Horarios</h1>

@if (ciclosLectivos == null && carreras==null)
{
    <p><em>Cargando ciclos lectivos y carreras...</em></p>
}
else
{
    
    if(idCicloLectivoSeleccionado==null)
    {
        <ListCard ListEntity="@(ciclosLectivos.Cast<IEntityIdNombre>().ToList())" OnSeleccionar="SeleccionarCicloLectivo" TituloCard="Ciclo Lectivo" />
    }
    else
    {
        if(idCarreraSeleccionada==null)
        {
            <ListCard ListEntity="@(carreras.Cast<IEntityIdNombre>().ToList())" OnSeleccionar="SeleccionarCarrera" TituloCard="Carrera" />
        }else
        {
            <div class="text-end">
                <button class="btn btn-info" @onclick="VolverAListaCarreras">Volver a lista de carreras</button>
            </div>
            if(usuarioStateService.Usuario.TipoUsuario==TipoUsuarioEnum.Alumno)
            {
                <TableDetallesHorarios DetallesHorarios="@detallesHorarios" />
            }else
            {
                <TableDetallesHorariosDocente DetallesHorarios="@detallesHorarios" />
            }

        }
        
    }
}

@code {
    private List<CicloLectivo>? ciclosLectivos;
    private List<Carrera>? carreras;
    private List<DetalleHorario>? detallesHorarios;

    private int? idCicloLectivoSeleccionado;
    private int? idCarreraSeleccionada;

    //from query
    [SupplyParameterFromQuery]
    [Parameter]
    public int IdCicloLectivo { get; set; }

    [SupplyParameterFromQuery]
    [Parameter]
    public int IdCarrera { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ciclosLectivos= await _memoryCache.GetAllCacheAsync<CicloLectivo>("CiclosLectivos");
        carreras = await _memoryCache.GetAllCacheAsync<Carrera>("Carreras");
        if (ciclosLectivos.Any(c => c.Actual))
        {
            idCicloLectivoSeleccionado = ciclosLectivos.Where(c => c.Actual).FirstOrDefault().Id;
        }
        else
        {
            logger.LogError("No hay ciclo lectivo seleccionado como actual");
        }
        if(usuarioStateService.Usuario!=null&&usuarioStateService.Usuario.TipoUsuario==TipoUsuarioEnum.Alumno)
        {
            if(usuarioStateService.Usuario.Alumno.InscripcionesACarreras.Count>1)
            {
                carreras = carreras.Where(c=>usuarioStateService.Usuario.Alumno.InscripcionesACarreras.Select(i=>i.CarreraId).Contains(c.Id)).ToList();
            }
            else if (idCicloLectivoSeleccionado != null) {
                idCarreraSeleccionada = usuarioStateService.Usuario.Alumno.InscripcionesACarreras.FirstOrDefault().CarreraId;
                //muestro por consola cuantos detalles horarios hay
                detallesHorarios =(await _memoryCache.GetAllCacheAsync<DetalleHorario>("DetallesHorarios"))
                .Where(d => d.Horario?.Materia.AnioCarrera.CarreraId == idCarreraSeleccionada && d.Horario.CicloLectivoId == idCicloLectivoSeleccionado).ToList();
            }
            //detallesHorarios = await detalleHorarioService.GetByCarreraAsync(idCicloLectivoSeleccionado, idCarreraSeleccionada);
        }
        if(usuarioStateService.Usuario!=null&&usuarioStateService.Usuario.TipoUsuario==TipoUsuarioEnum.Docente)
        {
            idCarreraSeleccionada = 0;

            //selecciono los horarios del docente logueado comprobando que no contenga nulos
            detallesHorarios = (await _memoryCache.GetAllCacheAsync<DetalleHorario>("DetallesHorarios"))
                .Where(d => d.Horario?.IntegrantesHorario?.Any(i => i.DocenteId == usuarioStateService.Usuario.Docente.Id) == true 
                            && d.Horario?.CicloLectivoId == idCicloLectivoSeleccionado)
                .ToList();

            
                
            
            //detallesHorarios = await detalleHorarioService.GetByCarreraAsync(idCicloLectivoSeleccionado, idCarreraSeleccionada);
        }
        if (IdCarrera != 0 && idCicloLectivoSeleccionado!=null)
        {
            idCarreraSeleccionada = IdCarrera;
            detallesHorarios = (await _memoryCache.GetAllCacheAsync<DetalleHorario>("DetallesHorarios"))
            .Where(d => d.Horario?.Materia.AnioCarrera.CarreraId == idCarreraSeleccionada && d.Horario.CicloLectivoId == idCicloLectivoSeleccionado).ToList();
        }

    }

    private async Task SeleccionarCicloLectivo(int idCicloLectivo)
    {
        idCicloLectivoSeleccionado = idCicloLectivo;
        StateHasChanged();
    }

    private async Task SeleccionarCarrera(int idCarrera)
    {
        idCarreraSeleccionada = idCarrera;
        
        detallesHorarios = _memoryCache.GetAllCacheAsync<DetalleHorario>("DetallesHorarios").Result
        .Where(d => d.Horario?.Materia.AnioCarrera.CarreraId == idCarreraSeleccionada && d.Horario.CicloLectivoId == idCicloLectivoSeleccionado).ToList();
        StateHasChanged();
    }

    private async Task VolverAListaCarreras()
    {
        idCarreraSeleccionada = null;
        detallesHorarios = null;
        StateHasChanged();
    }

    
}
