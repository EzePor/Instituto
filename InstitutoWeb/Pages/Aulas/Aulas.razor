@page "/aulas"

@inject IGenericService<Aula> aulaService
@inject SweetAlertService SweetAlert

<PageTitle>Aulas</PageTitle>
<h1>Aulas</h1>

@if (aulas == null)
{
    <p><em>Cargando...</em></p>
}
else
{
    <NuevoEditarAula Aula="@currentAula" OnCancelar="Cancelar" OnGuardar="Guardar" />
    <TableIdNombre ListEntity="@(aulas.Cast<IEntityIdNombre>().ToList())" OnEditar="Editar" OnEliminar="Eliminar" />
}

@code {
    private List<Aula>? aulas;
    private Aula currentAula;

    protected override async Task OnInitializedAsync()
    {
        aulas = await aulaService.GetAllAsync();
    }

    private async void Eliminar(IEntityIdNombre entity)
    {
        var aula = (Aula)entity;
        SweetAlertResult respuesta = await SweetAlert.FireAsync(new SweetAlertOptions
        {
            Title = "Borrando aula",
            Text = $"¿Está seguro que desea borrar el aula {aula.Nombre}?",
            Icon = SweetAlertIcon.Warning,
            ShowCancelButton = true,
            ConfirmButtonText = "Si, quiero borrarla!",
            CancelButtonText = "No, espera"
        });
        if (respuesta.IsConfirmed)
        {
            await aulaService.DeleteAsync(aula.Id);
            aulas = await aulaService.GetAllAsync();
            StateHasChanged();
        }
    }

    private async Task Guardar()
    {
        aulas = await aulaService.GetAllAsync();
        currentAula = null;
        StateHasChanged();
    }

    private async Task Cancelar()
    {
        currentAula = null;
    }

    private async Task Editar(IEntityIdNombre entity)
    {
        var aula = (Aula)entity;
        currentAula = aula;
    }
}
