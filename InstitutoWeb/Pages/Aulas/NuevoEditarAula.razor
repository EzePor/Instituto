@inject IGenericService<Aula> aulaService
@inject IMemoryCacheService MemoryCacheService


@if (aulaEdit == null)
{
    <p><em>Cargando...</em></p>
}
else
{
    <div style="background-color: @(isEditing ? "lightyellow" : "white")">
        <EditForm Model="@aulaEdit" OnValidSubmit="Guardar">
            <DataAnnotationsValidator />
            <div class="container">
                <div class="row">
                    <InputTextNombre Entity="@aulaEdit" TextLabel="Nombre del aula:" />
                    <ValidationSummary />
                    <ButtonsGuardarCancelar isEditing="@isEditing" OnCancelar="HandleCancelar" />
                </div>
            </div>
        </EditForm>
    </div>
}
@code {

    [Parameter]
    public EventCallback OnGuardar { get; set; }

    [Parameter]
    public EventCallback OnCancelar { get; set; }

    [Parameter]
    public Aula? aula { get; set; }

    public Aula? aulaEdit { get; set; }

    private bool isEditing => aula != null;

    private List<Aula>? aulas { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (aula == null)
        {
            aulaEdit = new Aula();
        }
        else
        {
            aula.CopyPropertiesTo(aulaEdit);
        }

        StateHasChanged();
    }

    private async Task Guardar()
    {
        if (isEditing)
            await aulaService.UpdateAsync(aulaEdit);
        else
            await aulaService.AddAsync(aulaEdit);
        MemoryCacheService.Aulas = await aulaService.GetAllAsync();
        await OnGuardar.InvokeAsync();
    }

    private async Task HandleCancelar()
    {
        await OnCancelar.InvokeAsync();
    }
}
