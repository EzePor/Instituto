@page "/inscripcionmesasexamenes"

@inject IGenericService<CicloLectivo> cicloLectivoService
@inject IGenericService<Carrera> carreraService
@inject IDetalleHorarioService detalleHorarioService
@inject SweetAlertService SweetAlert
@inject ILogger<InscripcionMesasExamenes> logger
@inject IMemoryCacheService MemoryCacheService
@inject IUsuarioStateService usuarioStateService


<PageTitle>Inscripción Mesas de Exámenes</PageTitle>


@if (turnoExamenSeleccionado == null )
{
    <p><em>No existe un turno de examen abierto actualmente</em></p>
}
else
{
    <h1>Turno: @turnoExamenSeleccionado.Nombre</h1>
    if(carreraSeleccionada!=null&&materias!=null)
    {
        <ListCardInscripcionMesasExamenes Materias="@materias" OnFinalizarInscripcion="FinalizarInscripcion"  />
    }
    
}

@code {
    private List<TurnoExamen>? turnosExamenes;
    private List<Carrera>? carreras;
    private TurnoExamen? turnoExamenSeleccionado;
    private Carrera? carreraSeleccionada;
    private List<AnioCarrera>? aniosCarrera;
    private List<Materia>? materias;

    private int? idCicloLectivoSeleccionado;
    private int? idCarreraSeleccionada;


    protected override async Task OnInitializedAsync()
    {
        turnosExamenes = MemoryCacheService.TurnosExamenes;
        logger.LogInformation($"turnosExamenes {turnosExamenes.Count}");
        carreras = MemoryCacheService.Carreras;
        logger.LogInformation($"carreras {carreras.Count}");
        if (MemoryCacheService.TurnosExamenes.Any(c=>c.Actual))
        {
            turnoExamenSeleccionado = MemoryCacheService.TurnosExamenes.Where(c => c.Actual).FirstOrDefault();
        }
        else
        {
            logger.LogError("No hay turno examen seleccionado como actual");
        }
        logger.LogInformation($"turnoSeleccionado {turnoExamenSeleccionado.Nombre}");
        if(usuarioStateService.Usuario!=null&&usuarioStateService.Usuario.TipoUsuario==TipoUsuarioEnum.Alumno)
        {
            if(usuarioStateService.Usuario.Alumno.InscripcionesACarreras.Count>1)
            {
                logger.LogInformation($"hasta aca llega / inscripciones {usuarioStateService.Usuario.Alumno.InscripcionesACarreras.Count}");
                carreras = MemoryCacheService.Carreras.Where(c=>usuarioStateService.Usuario.Alumno.InscripcionesACarreras.Select(i=>i.CarreraId).Contains(c.Id)).ToList();
                logger.LogInformation($"carreras del alumno {carreras.Count}");
            }

        }
        carreraSeleccionada = usuarioStateService.Usuario.Alumno.InscripcionesACarreras.FirstOrDefault().Carrera;
        logger.LogInformation($"carrera seleccionada {carreraSeleccionada.Nombre}");

        aniosCarrera = MemoryCacheService.AniosCarreras.Where(a => a.CarreraId == carreraSeleccionada.Id).ToList();
        //muestros cuantos anios carrera tiene la carrera seleccionada con el logger
        logger.LogInformation($"anios carrera {aniosCarrera.Count}");


        materias = MemoryCacheService.Materias.Where(m => m.AnioCarrera.CarreraId == carreraSeleccionada.Id   
        ).ToList();
        //muestros cuantas materias tiene la carrera seleccionada con el logger
        logger.LogInformation($"materias {materias.Count}");


    }

    private async Task FinalizarInscripcion()
    {
        StateHasChanged();
    }





    
}
