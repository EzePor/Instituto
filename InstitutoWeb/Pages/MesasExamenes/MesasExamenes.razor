@page "/mesasexamenes"

@inject SweetAlertService SweetAlert
@inject ILogger<MesasExamenes> logger
@inject IMemoryCacheService _memoryCache
@inject IUsuarioStateService usuarioStateService


<PageTitle>Mesas de exámenes</PageTitle>
<h1>Mesas de exámenes</h1>

@if (turnosExamenes == null && carreras==null)
{
    <p><em>Cargando...</em></p>
}
else
{
    
    if(idTurnoExamenSeleccionado==null)
    {
        <ListCard ListEntity="@(turnosExamenes.Cast<IEntityIdNombre>().ToList())" OnSeleccionar="SeleccionarTurnoExamem" TituloCard="Turno de examen" />
    }
    else
    {
        if(idCarreraSeleccionada==null&&usuarioStateService?.Usuario?.TipoUsuario==TipoUsuarioEnum.Alumno)
        {
            <ListCard ListEntity="@(carreras.Cast<IEntityIdNombre>().ToList())" OnSeleccionar="SeleccionarCarrera" TituloCard="Carrera" />
        }else
        {
            <div class="text-end">
                <button class="btn btn-info" @onclick="VolverAListaCarreras">Volver a lista de carreras</button>
            </div>
            if (usuarioStateService.Usuario.TipoUsuario == TipoUsuarioEnum.Alumno)
            {
                <TableMesaExamen MesasExamenes="mesasExamenes"/>
            } else
            {
                <TableMesaExamenDocente MesasExamenes="mesasExamenes"/>
            }

        }
        
    }
}

@code {
    private List<TurnoExamen>? turnosExamenes;
    private List<Carrera>? carreras;
    private List<MesaExamen>? mesasExamenes;

    private int? idTurnoExamenSeleccionado;
    private int? idCarreraSeleccionada;
    private Carrera carreraSeleccionada;

    protected override async Task OnInitializedAsync()
    {
        turnosExamenes = await _memoryCache.GetAllCacheAsync<TurnoExamen>("TurnosExamenes");
        carreras = await _memoryCache.GetAllCacheAsync<Carrera>("Carreras");
        mesasExamenes = await _memoryCache.GetAllCacheAsync<MesaExamen>("MesasExamenes");
        if(turnosExamenes.Any(turno=>turno.Actual))
        {
            idTurnoExamenSeleccionado = turnosExamenes.FirstOrDefault(turno=>turno.Actual).Id;
        }
        logger.LogInformation($"turnoSeleccionado {idTurnoExamenSeleccionado}");
        if(usuarioStateService.Usuario.TipoUsuario==TipoUsuarioEnum.Alumno)
        {
            if (usuarioStateService.Usuario.Alumno.InscripcionesACarreras.Count > 1)
            {
                carreras = carreras
                            .Where(c => usuarioStateService.Usuario.Alumno.InscripcionesACarreras.Select(i => i.CarreraId).Contains(c.Id)).ToList();
            }
            else
            {
                idCarreraSeleccionada = usuarioStateService.Usuario.Alumno.InscripcionesACarreras.FirstOrDefault().Carrera.Id;
                logger.LogInformation($"carrera seleccionada {carreraSeleccionada.Nombre}");
                mesasExamenes= mesasExamenes.Where(m => m.TurnoExamenId == idTurnoExamenSeleccionado && m.Materia.AnioCarrera.CarreraId == idCarreraSeleccionada).ToList();

            }
        }
        else
        {
            if(idTurnoExamenSeleccionado!=null)
            {
                //filtro las mesas de examenes por el turno seleccionado y por el docente logueado
                mesasExamenes = (await _memoryCache.GetAllCacheAsync<MesaExamen>("MesasExamenes"))
                                .Where(m => m.TurnoExamenId == idTurnoExamenSeleccionado &&
                                m.DetallesMesaExamen.Any(detalle => detalle.DocenteId == usuarioStateService.Usuario.DocenteId)).ToList();
            }
        }
        logger.LogInformation($"mesasExamenes {mesasExamenes?.Count}");
    }

    private async Task SeleccionarTurnoExamem(int idTurno)
    {
        idTurnoExamenSeleccionado = idTurno;
        StateHasChanged();
    }

    private async Task SeleccionarCarrera(int idCarrera)
    {
        idCarreraSeleccionada = idCarrera;
        mesasExamenes = mesasExamenes.Where(m => m.TurnoExamenId == idTurnoExamenSeleccionado && m.Materia.AnioCarrera.CarreraId == idCarreraSeleccionada).ToList();
        //mesasExamenes = await mesaExamenService.GetByTurnoAndCarreraAsync(idTurnoExamenSeleccionado, idCarreraSeleccionada);
        logger.LogInformation(mesasExamenes.Count.ToString());
        StateHasChanged();
    }

    private async Task VolverAListaCarreras()
    {
        idCarreraSeleccionada = null;
        mesasExamenes = null;
        StateHasChanged();
    }

    
}
